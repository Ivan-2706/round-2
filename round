    // 1
int is_white(const char c)
{
    char znak[] = {' ', '\t', '\n', '\0'};

    for (int i = 0; znak[i] != '\0'; ++i)
    {

        if (znak[i] == c)
        {
            return 1;
        }

    }
    return 0;
}

//int main()
//{
//    printf("%d %d\n", is_white('\t'), is_white(' '));
//    return 0;
//}


    // 2
void change_whites(char string [])
{
    char znak[] = {' ', '\t', '\0'};

    for (int i = 0; znak[i] != '\0'; i++)
    {
        for (int j = 0; string[j] != '\0'; j++)
        {
            if (znak[i] == string[j])
            {
                string[j] = '.';
            }
        }
    }
}


//int main()
//{
//    char str[] = "H e l l o w o r l d ! ";
//    change_whites(str);
//    printf("%s\n", str);
//    return 0;
//}


        // 3
int guess_eval(const int guess, const int my_number)
{
    if(guess == my_number){
        return 1;
    }
    else if(guess > my_number){
        return 0;
    }
    return 2;
}


//int main()
//{
//    printf("%d %d %d\n", guess_eval(34,22), guess_eval(22, 34), guess_eval(34,34));
//    return 0;
//}

        //4
int leap_year(const int year)
{
    if( 1 > year || year > 4443 ){
        return -1;
    }
    if ((year % 400 == 0 && year % 100 != 0) || (year % 4 == 0 && year % 100 != 0))
    {
        return 1;
    }
    return 0;
}


//int main()
//{
//    printf("%d %d %d\n", leap_year(4000),leap_year(3000),leap_year(3004));
//    return 0;
//}


        // 5
int count_positives1(const int size, const int array[])
{
    int cislo = 0;
    for (int i = 0; i < size; i++)
    {
        if (array[i] > 0)
        {
            cislo++;
        }
    }

    return cislo;
}

//int main()
//{
//    const int array1[] = {1,2,0,3,4,0};
//    const int array2[] = {1,2,6,3,4,7};
//    const int array3[] = {-1,-2,0,-3,0,-2};
//    printf("%d %d %d\n", count_positives(6, array1), count_positives(6, array2), count_positives(6, array3));
//    return 0;
//}


int count_whites(const char string[])
{
    char znak[] = {' ', '\t', '\n', '\0'};
    int cislo = 0;
    for (int i = 0; znak[i] != '\0'; i++)
    {
        for (int j = 0; string[j] != '\0'; j++)
        {
            if (znak[i] == string[j])
            {
                cislo++;
            }
        }
    }
    return cislo;
}


//int main()
//{
//    const char string[] = "H e l l o , h o w a r e y o u ? ";
//    printf("%d\n", count_whites(string));
//    return 0;
//}



int direction_correction(const int degree)
{
    int syma = degree;
    while(syma > 360)
    {
        syma -= 360;
    }
    if(syma == 0){
        return 0;
    }
    else if(syma == 90){
        return 90;
    }
    else if(syma == 180){
        return 180;
    }
    else if(syma == 270){
        return 270;
    }
    else if(syma == 360){
        return 0;
    }
    else if(syma < 0){
        return -1;
    }
    return 0;
}



//int main()
//{
//    printf("%d %d %d\n", direction_correction(360), direction_correction(540), direction_correction(180));
//    return 0;
//}


int count_positives(const int size, const int array[])
{
    for (int i = 0; i < size; i++)
    {
        if (array[i] <= 0)
        {
            return 0;
        }
    }
    return 1;
}

//int main()
//{
//    const int array1[] = {1,2,0,3,4,0};
//    const int array2[] = {1,2,6,3,4,7};
//    const int array3[] = {-1,-2,0,-3,0,-2};
//    printf("%d %d %d\n", count_positives(6, array1), count_positives(6, array2), count_positives(6, array3));
//    return 0;
//}


int last_positive(const int size, const int array[])
{

    int max_positive = 0;
    for (int i = 0; i < size; i++)
    {
        if (array[i] > max_positive)
        {
            max_positive = array[i];
        }
    }
    if(max_positive == 0)
    {
        return -1;
    }
    return max_positive;

}

//int main()
//{
//    const int array[] = {0,1,0};
//    const int array2[] = {-1,0,-6,-2};
//
//    printf("%d %d\n", last_positive(3, array), last_positive(4, array2));
//    return 0;
//}


int binary_num(const int num)
{
    if(num == 1 || num == 0)
    {
        return 1;
    }
    else if(num < 1000 && num > -1000)
    {
        return 0;
    }
    return -1;
}


//int main()
//{
//    printf("%d %d %d\n", binary_num(-1001), binary_num(3), binary_num(1));
//    return 0;
//}



void swap_sign(const int size, int array[])
{
    for (int i = 0; i < size; i++)
    {
        if (array[i] > 0)
        {
            array[i] = -array[i];
        }
        else if (array[i] < 0)
        {
            array[i] = -array[i];
        }
    }
}

//int main()
//{
//    int array[] = {1, 2, 0, -3, 4, 0};
//    swap_sign(6, array);
//    for (int i = 0; i < 6; i++)
//    {
//        printf("%d ", array[i]);
//    }
//    return 0;
//}


int div_by_3(const int num)
{
    if(num % 3 == 0)
    {
        return 1;
    }
    return 0;
}

//int main()
//{
//    printf("%d %d %d\n", div_by_3(-3), div_by_3(9), div_by_3(8));
//    return 0;
//}

int same_case(const char a, const char b)
{
    if(a >= 'a' && a <= 'z' && b >= 'a' && b <= 'z')
	{
		return 1;
	}
	if((a >= 'a' && a <= 'z' && b >= 'A' && b <= 'Z') || (a >= 'A' && a <= 'Z' && b >= 'a' && b <= 'z'))
	{
		return 0;
	}
	return -1;

}

//int main()
//{
//	printf("%d %d %d\n", same_case('a', 'f'), same_case('L', 'g'), same_case('#', 'P'));
//	return 0;
//}


int find_first_A(const char string[])
{
    int abc = 0;
    for (int j = 0; string[j]; ++j)
    {
        if (('a' == string[j]) || ('A' == string[j]))
        {
            return abc;
        }
        abc++;
    }
    return -1;
}


//int main()
//{
//    printf("%d\n", find_first_A("Tomorrow afternoon"));
//    return 0;
//}


void string_to_upper(char string[])
{
    for (int i = 0; string[i] != '\0'; i++)
    {
        if (string[i] >= 'a' && string[i] <= 'z')
        {
            string[i] = string[i] - 'a' + 'A';
        }
    }
}


//int main()
//{
//    char str[] = "Hello, World!";
//    printf("Original string: %s\n", str);
//    string_to_upper(str);
//    printf("Modified string: %s\n", str);
//    return 0;
//}

